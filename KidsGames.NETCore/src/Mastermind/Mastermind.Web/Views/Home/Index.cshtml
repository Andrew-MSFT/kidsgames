@{
    ViewData["Title"] = "Mastermind";
    ViewData["Description"] = "The home page of my website";
    string SetCodeColClass = "col-md-2";
    string GuessCodeColClass = SetCodeColClass;
    string SpacerColClass = "col-md-1";
    string GuessResultColClass = SetCodeColClass;
}

<link rel="stylesheet" href="~/css/styles.css" />
@*<link rel="stylesheet" href="~/css/bootstrap.css" />*@
<link rel="stylesheet" href="~/css/bootstrap-grid.css" />
<script type='text/javascript' src='~/js/knockout-min.js'></script>

<div class="container" data-bind="style: {visibility: gameInitialized() ? 'collapse' : 'visible'}">
    <div data-bind="foreach: games" class="container">
        <div class="row">
            <button data-bind="click: clicked"><span data-bind="text: name"></span></button>
        </div>
    </div>
    <div class="row">
        <button onclick="createNewGame()">New Game</button>
    </div>
</div>

<div class="container" data-bind="style: {visibility: gameInitialized() ? 'visible' : 'collapse'}">
    <div class="row">
        <div class="@SetCodeColClass">
            <div>Role: <span data-bind="text: playerRole"></span></div>
        </div>
        <div class="@GuessCodeColClass">
            Make Guesses
        </div>
        @*<div class="@SpacerColClass"></div>*@
        <div class="@GuessResultColClass">
            Guess Results
        </div>
    </div>

    <div class="row">
        <div class="@SetCodeColClass" data-bind="style: {visibility: isCodeCreator() && !isCodeSet() ? 'visible' : 'collapse'}">
            <table>
                <tbody>
                    <tr data-bind="foreach: piecePalette">
                        <td>
                            <div data-bind="css: displayedPiece, id: id" ondragstart="drag(event)"></div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="@GuessCodeColClass" data-bind="style: {visibility: isCodeBreaker() ? 'visible' : 'collapse'}">
            <table>
                <tbody>
                    <tr data-bind="foreach: piecePalette">
                        <td>
                            <div data-bind="css: displayedPiece, id: id" ondragstart="drag(event)"></div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        @*<div class="@SpacerColClass"></div>*@
        <div class="@GuessResultColClass">

        </div>
    </div>

    <div class="row">
        <div class="@SetCodeColClass" data-bind="style: {visibility: isCodeCreator() ? 'visible' : 'collapse'}">
            <table>
                <tbody>
                    <tr data-bind="foreach: secretCode">
                        <td>
                            <div data-bind="css: displayedPiece, id: id" ondrop="drop(event)" ondragover="allowDrop(event)"></div>
                        </td>
                    </tr>
                </tbody>
            </table>
            <span data-bind="text: codeSetMessage"></span>
            <p data-bind="style: {visibility: !isCodeSet() && isCodeCreator() ? 'visible' : 'collapse'}">
                <button onclick="setCode()">Set Code</button>
            </p>
        </div>

        <div class="@GuessCodeColClass">
            <table>
                <tbody data-bind="foreach: guesses">
                    <tr data-bind="foreach: items, as: 'item'">
                        <td>
                            <div data-bind="css: displayedPiece, id: id" ondrop="drop(event)" ondragover="allowDrop(event)"></div>
                        </td>
                    </tr>
                </tbody>
            </table>
            <p data-bind="style: {visibility: isCodeBreaker() ? 'visible' : 'collapse'}">
                <button onclick="makeGuess()">Make Guess</button>
            </p>
        </div>
        @*<div class="@SpacerColClass"></div>*@
        <div class="@GuessResultColClass">
            <table>
                <tbody data-bind="foreach: results">
                    <tr data-bind="foreach: items, as: 'item'">
                        <td>
                            <div data-bind="css: displayedPiece, id: id"></div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        <p id="stateLabel">Ready to connect...</p>
    </div>
    <div class="row">
        <div class="row">
            <label for="connectionUrl">WebSocket Server URL:</label>
            <input id="connectionUrl" />
            <button id="connectButton" type="submit">Connect</button>
        </div>
    </div>
    <div class="row">
        <label for="sendMessage">Message to send:</label>
        <input id="sendMessage" disabled />
        <button id="sendButton" type="submit" disabled>Send</button>
        <button id="closeButton" disabled>Close Socket</button>
    </div>

    <div class="row">
        <h2>Communication Log</h2>
        <table style="width: 800px">
            <thead>
                <tr>
                    <td style="width: 100px">From</td>
                    <td style="width: 100px">To</td>
                    <td>Data</td>
                </tr>
            </thead>
            <tbody id="commsLog"></tbody>
        </table>
    </div>
</div>

<script>
    var connectionForm = document.getElementById("connectionForm");
    var connectionUrl = document.getElementById("connectionUrl");
    var connectButton = document.getElementById("connectButton");
    var stateLabel = document.getElementById("stateLabel");
    var sendMessage = document.getElementById("sendMessage");
    var sendButton = document.getElementById("sendButton");
    var sendForm = document.getElementById("sendForm");
    var commsLog = document.getElementById("commsLog");
    var socket;
    var scheme = document.location.protocol == "https:" ? "wss" : "ws";
    var port = document.location.port ? (":" + document.location.port) : "";
    connectionUrl.value = scheme + "://" + document.location.hostname + port + "/ws";
    function updateState() {
        function disable() {
            sendMessage.disabled = true;
            sendButton.disabled = true;
            closeButton.disabled = true;
        }
        function enable() {
            sendMessage.disabled = false;
            sendButton.disabled = false;
            closeButton.disabled = false;
        }
        connectionUrl.disabled = true;
        connectButton.disabled = true;
        if (!socket) {
            disable();
        } else {
            switch (socket.readyState) {
                case WebSocket.CLOSED:
                    stateLabel.innerHTML = "Closed";
                    disable();
                    connectionUrl.disabled = false;
                    connectButton.disabled = false;
                    break;
                case WebSocket.CLOSING:
                    stateLabel.innerHTML = "Closing...";
                    disable();
                    break;
                case WebSocket.CONNECTING:
                    stateLabel.innerHTML = "Connecting...";
                    disable();
                    break;
                case WebSocket.OPEN:
                    stateLabel.innerHTML = "Open";
                    enable();
                    break;
                default:
                    stateLabel.innerHTML = "Unknown WebSocket State: " + socket.readyState;
                    disable();
                    break;
            }
        }
    }
    closeButton.onclick = function () {
        if (!socket || socket.readyState != WebSocket.OPEN) {
            alert("socket not connected");
        }
        socket.close(1000, "Closing from client");
    }
    sendButton.onclick = function () {
        if (!socket || socket.readyState != WebSocket.OPEN) {
            alert("socket not connected");
        }
        var data = sendMessage.value;
        socket.send(data);
        commsLog.innerHTML += '<tr>' +
            '<td class="commslog-client">Client</td>' +
            '<td class="commslog-server">Server</td>' +
            '<td class="commslog-data">' + data + '</td>'
        '</tr>';
    }
    connectButton.onclick = function () {
        stateLabel.innerHTML = "Connecting";
        socket = new WebSocket(connectionUrl.value);
        socket.onopen = function (event) {
            updateState();
            commsLog.innerHTML += '<tr>' +
                '<td colspan="3" class="commslog-data">Connection opened</td>' +
                '</tr>';
        };
        socket.onclose = function (event) {
            updateState();
            commsLog.innerHTML += '<tr>' +
                '<td colspan="3" class="commslog-data">Connection closed. Code: ' + event.code + '. Reason: ' + event.reason + '</td>' +
                '</tr>';
        };
        socket.onerror = updateState;
        socket.onmessage = function (event) {
            commsLog.innerHTML += '<tr>' +
                '<td class="commslog-server">Server</td>' +
                '<td class="commslog-client">Client</td>' +
                '<td class="commslog-data">' + event.data + '</td>'
            '</tr>';
        };
    };
</script>


@section Scripts {
    @*Insert any script tags for this page here*@
    <script type="text/javascript" src="~/js/jquery.min.js"></script>
    <script type="text/javascript" src="~/js/bootstrap.min.js"></script>
    <script type="text/javascript" src="~/js/mm-viewmodel.js"></script>
    <script type="text/javascript" src="~/js/mastermind.js"></script>

}